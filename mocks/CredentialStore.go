// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// CredentialStore is an autogenerated mock type for the CredentialStore type
type CredentialStore struct {
	mock.Mock
}

type CredentialStore_Expecter struct {
	mock *mock.Mock
}

func (_m *CredentialStore) EXPECT() *CredentialStore_Expecter {
	return &CredentialStore_Expecter{mock: &_m.Mock}
}

// Clear provides a mock function with given fields:
func (_m *CredentialStore) Clear() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Clear")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CredentialStore_Clear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clear'
type CredentialStore_Clear_Call struct {
	*mock.Call
}

// Clear is a helper method to define mock.On call
func (_e *CredentialStore_Expecter) Clear() *CredentialStore_Clear_Call {
	return &CredentialStore_Clear_Call{Call: _e.mock.On("Clear")}
}

func (_c *CredentialStore_Clear_Call) Run(run func()) *CredentialStore_Clear_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CredentialStore_Clear_Call) Return(_a0 error) *CredentialStore_Clear_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CredentialStore_Clear_Call) RunAndReturn(run func() error) *CredentialStore_Clear_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: partitionKey
func (_m *CredentialStore) Get(partitionKey string) ([]byte, error) {
	ret := _m.Called(partitionKey)

	if len(ret) == 0 {
		panic("no return value specified for GetCluster")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(partitionKey)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(partitionKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(partitionKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CredentialStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCluster'
type CredentialStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - partitionKey string
func (_e *CredentialStore_Expecter) Get(partitionKey interface{}) *CredentialStore_Get_Call {
	return &CredentialStore_Get_Call{Call: _e.mock.On("GetCluster", partitionKey)}
}

func (_c *CredentialStore_Get_Call) Run(run func(partitionKey string)) *CredentialStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *CredentialStore_Get_Call) Return(_a0 []byte, _a1 error) *CredentialStore_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CredentialStore_Get_Call) RunAndReturn(run func(string) ([]byte, error)) *CredentialStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: data, partitionKey
func (_m *CredentialStore) Set(data []byte, partitionKey string) error {
	ret := _m.Called(data, partitionKey)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, string) error); ok {
		r0 = rf(data, partitionKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CredentialStore_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type CredentialStore_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - data []byte
//   - partitionKey string
func (_e *CredentialStore_Expecter) Set(data interface{}, partitionKey interface{}) *CredentialStore_Set_Call {
	return &CredentialStore_Set_Call{Call: _e.mock.On("Set", data, partitionKey)}
}

func (_c *CredentialStore_Set_Call) Run(run func(data []byte, partitionKey string)) *CredentialStore_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(string))
	})
	return _c
}

func (_c *CredentialStore_Set_Call) Return(_a0 error) *CredentialStore_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CredentialStore_Set_Call) RunAndReturn(run func([]byte, string) error) *CredentialStore_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewCredentialStore creates a new instance of CredentialStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCredentialStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *CredentialStore {
	mock := &CredentialStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
