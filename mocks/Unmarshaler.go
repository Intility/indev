// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Unmarshaler is an autogenerated mock type for the Unmarshaler type
type Unmarshaler struct {
	mock.Mock
}

type Unmarshaler_Expecter struct {
	mock *mock.Mock
}

func (_m *Unmarshaler) EXPECT() *Unmarshaler_Expecter {
	return &Unmarshaler_Expecter{mock: &_m.Mock}
}

// Unmarshal provides a mock function with given fields: _a0
func (_m *Unmarshaler) Unmarshal(_a0 []byte) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Unmarshal")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unmarshaler_Unmarshal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unmarshal'
type Unmarshaler_Unmarshal_Call struct {
	*mock.Call
}

// Unmarshal is a helper method to define mock.On call
//   - _a0 []byte
func (_e *Unmarshaler_Expecter) Unmarshal(_a0 interface{}) *Unmarshaler_Unmarshal_Call {
	return &Unmarshaler_Unmarshal_Call{Call: _e.mock.On("Unmarshal", _a0)}
}

func (_c *Unmarshaler_Unmarshal_Call) Run(run func(_a0 []byte)) *Unmarshaler_Unmarshal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *Unmarshaler_Unmarshal_Call) Return(_a0 error) *Unmarshaler_Unmarshal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Unmarshaler_Unmarshal_Call) RunAndReturn(run func([]byte) error) *Unmarshaler_Unmarshal_Call {
	_c.Call.Return(run)
	return _c
}

// NewUnmarshaler creates a new instance of Unmarshaler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUnmarshaler(t interface {
	mock.TestingT
	Cleanup(func())
}) *Unmarshaler {
	mock := &Unmarshaler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
