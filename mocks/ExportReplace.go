// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	cache "github.com/AzureAD/microsoft-authentication-library-for-go/apps/cache"

	mock "github.com/stretchr/testify/mock"
)

// ExportReplace is an autogenerated mock type for the ExportReplace type
type ExportReplace struct {
	mock.Mock
}

type ExportReplace_Expecter struct {
	mock *mock.Mock
}

func (_m *ExportReplace) EXPECT() *ExportReplace_Expecter {
	return &ExportReplace_Expecter{mock: &_m.Mock}
}

// Export provides a mock function with given fields: ctx, _a1, hints
func (_m *ExportReplace) Export(ctx context.Context, _a1 cache.Marshaler, hints cache.ExportHints) error {
	ret := _m.Called(ctx, _a1, hints)

	if len(ret) == 0 {
		panic("no return value specified for Export")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, cache.Marshaler, cache.ExportHints) error); ok {
		r0 = rf(ctx, _a1, hints)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExportReplace_Export_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Export'
type ExportReplace_Export_Call struct {
	*mock.Call
}

// Export is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 cache.Marshaler
//   - hints cache.ExportHints
func (_e *ExportReplace_Expecter) Export(ctx interface{}, _a1 interface{}, hints interface{}) *ExportReplace_Export_Call {
	return &ExportReplace_Export_Call{Call: _e.mock.On("Export", ctx, _a1, hints)}
}

func (_c *ExportReplace_Export_Call) Run(run func(ctx context.Context, _a1 cache.Marshaler, hints cache.ExportHints)) *ExportReplace_Export_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cache.Marshaler), args[2].(cache.ExportHints))
	})
	return _c
}

func (_c *ExportReplace_Export_Call) Return(_a0 error) *ExportReplace_Export_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExportReplace_Export_Call) RunAndReturn(run func(context.Context, cache.Marshaler, cache.ExportHints) error) *ExportReplace_Export_Call {
	_c.Call.Return(run)
	return _c
}

// Replace provides a mock function with given fields: ctx, _a1, hints
func (_m *ExportReplace) Replace(ctx context.Context, _a1 cache.Unmarshaler, hints cache.ReplaceHints) error {
	ret := _m.Called(ctx, _a1, hints)

	if len(ret) == 0 {
		panic("no return value specified for Replace")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, cache.Unmarshaler, cache.ReplaceHints) error); ok {
		r0 = rf(ctx, _a1, hints)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExportReplace_Replace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Replace'
type ExportReplace_Replace_Call struct {
	*mock.Call
}

// Replace is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 cache.Unmarshaler
//   - hints cache.ReplaceHints
func (_e *ExportReplace_Expecter) Replace(ctx interface{}, _a1 interface{}, hints interface{}) *ExportReplace_Replace_Call {
	return &ExportReplace_Replace_Call{Call: _e.mock.On("Replace", ctx, _a1, hints)}
}

func (_c *ExportReplace_Replace_Call) Run(run func(ctx context.Context, _a1 cache.Unmarshaler, hints cache.ReplaceHints)) *ExportReplace_Replace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cache.Unmarshaler), args[2].(cache.ReplaceHints))
	})
	return _c
}

func (_c *ExportReplace_Replace_Call) Return(_a0 error) *ExportReplace_Replace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExportReplace_Replace_Call) RunAndReturn(run func(context.Context, cache.Unmarshaler, cache.ReplaceHints) error) *ExportReplace_Replace_Call {
	_c.Call.Return(run)
	return _c
}

// NewExportReplace creates a new instance of ExportReplace. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExportReplace(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExportReplace {
	mock := &ExportReplace{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
