stages:
  - build
  - test
  - release

variables:
  # must match Makefile GOLANGCI_LINT_VERSION
  GO_VERSION: "1.22"
  GOLANGCI_LINT_VERSION: "v1.59.1"

build:
  stage: build
  image: golang:${GO_VERSION}
  script:
    - mkdir -p bin
    - go build -o bin/idpctl cmd/idpctl/main.go
  needs: []

test:
  stage: test
  image: golang:${GO_VERSION}
  before_script:
    - go install github.com/boumenot/gocover-cobertura@latest
    - go install gotest.tools/gotestsum@latest
  script:
    - go install ./...
    - go test -short -run='^Test' ./... -coverprofile=coverage.txt -covermode count
    - gocover-cobertura < coverage.txt > coverage.xml
    - gotestsum --junitfile report.xml --format testname -- -run='^Test' ./... -short
  coverage: '/coverage: \d+.\d+% of statements/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: report.xml
  needs: ["build"]

lint:
  image: golangci/golangci-lint:${GOLANGCI_LINT_VERSION}-alpine
  stage: test
  script:
    - apk --no-cache add git jq bash
    - "[ -e .golangci.yaml ] || cp /golangci/.golangci.yml ."
    - golangci-lint run --out-format code-climate | tee gl-code-quality-report.json | jq -r '.[] | "\(.location.path):\(.location.lines.begin) \(.description)"'
  artifacts:
    when: on_success
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json
    expire_in: "1 day"
  needs: ["build"]

release:
  stage: release
  image:
    name: goreleaser/goreleaser
    entrypoint: [""]
  only:
    - tags
  variables:
    # Disable shallow cloning so that goreleaser can diff between tags to
    # generate a changelog.
    GIT_DEPTH: 0
  script:
    # clean up the artifacts
    - git clean -fdx
    # run goreleaser
    - goreleaser release --clean
